openapi: 3.1.0
info:
  title: NetHunt CRM API
  description: API for accessing and managing NetHunt CRM data.
  version: 1.0.0
servers:
- url: https://nethunt.com/api/v1/zapier
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Field:
      type: object
      properties:
        name:
          type: string
          description: Name of the field
    Record:
      type: object
      properties:
        recordId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        fields:
          $ref: '#/components/schemas/Field'
security:
- basicAuth: []
paths:
  /triggers/readable-folder:
    get:
      summary: List all readable folders
      security:
      - basicAuth: []
      responses:
        '200':
          description: A list of readable folders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
      operationId: getReadableFolders
  /triggers/writable-folder:
    get:
      summary: List all writable folders
      security:
      - basicAuth: []
      responses:
        '200':
          description: A list of writable folders
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
      operationId: getWritableFolders
  /triggers/folder-field/{folderId}:
    get:
      summary: List fields in a folder
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: A list of fields
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
      operationId: getFolderFields
  /searches/find-record/{folderId}:
    get:
      summary: Find records by ID or query
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          type: string
      - name: recordId
        in: query
        schema:
          type: string
      - name: query
        in: query
        schema:
          type: string
      - name: limit
        in: query
        schema:
          type: integer
          default: 1
      responses:
        '200':
          description: Matching records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Record'
      operationId: findRecords
  /actions/create-record/{folderId}:
    post:
      summary: Create a new record
      parameters:
      - name: folderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                timeZone:
                  type: string
                fields:
                  $ref: '#/components/schemas/Field'
      responses:
        '200':
          description: Record created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Record'
      operationId: createRecord
  /actions/create-comment/{recordId}:
    post:
      summary: Add a comment to a record
      parameters:
      - name: recordId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
      responses:
        '200':
          description: Comment added
          content:
            application/json:
              schema:
                type: object
                properties:
                  commentId:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
      operationId: createComment
  /actions/link-gmail-thread/{recordId}:
    post:
      summary: Link a Gmail thread to a record
      parameters:
      - name: recordId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gmailThreadId:
                  type: string
      responses:
        '200':
          description: Gmail thread linked
      operationId: linkGmailThread
